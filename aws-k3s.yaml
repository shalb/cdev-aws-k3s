{{- $createVpcCIDR := "10.8.0.0/18" -}}
{{- $azs_count := len .variables.azs -}}
_: &getKubeconfig "export KUBECONFIG=./kubeconfig_{{ .name }} && aws s3 cp s3://{{ .variables.bucket }}/{{ .name }}/kubeconfig ./kubeconfig_{{ .name }}"
_p: &provider_aws
- aws:
    region: {{ .variables.region }}


name: aws-k3s
kind: InfraTemplate
units:
  - 
    name: aws_key_pair
    type: tfmodule
    source: github.com/terraform-aws-modules/terraform-aws-key-pair?ref=v0.6.0
    providers: *provider_aws
    inputs:
      create_key_pair: true
      public_key: {{ .variables.public_key }}
      key_name: {{ .variables.public_key_name }}
  - 
    name: route53
    type: tfmodule
    source: github.com/shalb/cluster.dev-domain?ref=0.1.0
    inputs:
      region: {{ .variables.region }}
      cluster_name: {{ .name }}
      cluster_domain: {{ .variables.domain }}
      zone_delegation: {{ if eq .variables.domain "cluster.dev" }}true{{ else }}false{{ end }}
  {{- if not .variables.vpc_id }}
  - 
    name: vpc
    type: tfmodule
    providers: *provider_aws
    source: terraform-aws-modules/vpc/aws
    version: "2.70.0"
    inputs:
      name: {{ .name }}
      cidr: {{ $createVpcCIDR }}
      public_subnets:
      {{- range $index, $_ := .variables.azs }}
       - {{ cidrSubnet $createVpcCIDR 4 $index }}
      {{- end }}
      private_subnets:
      {{- range $index, $_ := .variables.azs }}
       - {{ cidrSubnet $createVpcCIDR 4 (add $index $azs_count ) }}
      {{- end }}
      azs: {{ insertYAML .variables.azs }}
  {{- end }}
  - 
    name: ext-dns-iam
    type: tfmodule
    source: ./ext-dns-iam
    providers: *provider_aws
    inputs:
      name: {{ .name }}-test
      domain: {{ remoteState "this.route53.zone_id" }}
  - 
    name: k3s
    type: tfmodule
    source: github.com/shalb/terraform-aws-k3s?ref=v0.2.0
    pre_hook:
      command: *getKubeconfig
      on_apply: false
    inputs:
      cluster_name: {{ .name }}
      extra_args:
        - "--disable traefik"
      domain: {{ remoteState "this.route53.domain" }}
      k3s_version: {{ .variables.k3s_version }}
      {{- if .variables.vpc_id }}
      public_subnets: {{ insertYAML .variables.public_subnets }}
      {{- else }}
      public_subnets: {{ remoteState "this.vpc.public_subnets" }}
      {{- end }}
      key_name: {{ remoteState "this.aws_key_pair.this_key_pair_key_name" }}
      region: {{ .variables.region }}
      s3_bucket: {{ .variables.bucket }}
      master_node_count: {{ .variables.master_node_count }}
      worker_node_groups: {{ insertYAML .variables.worker_node_groups  }}
      master_iam_policies: 
        - {{ remoteState "this.ext-dns-iam.arn" }}
      worker_iam_policies: 
        - {{ remoteState "this.ext-dns-iam.arn" }}
      enable_asg_rolling_auto_update: true
  - 
    name: cert-manager
    type: helm
    source:
      repository: "https://charts.jetstack.io"
      chart: "cert-manager"
      version: "v1.2.0"
    kubeconfig: ./kubeconfig_{{ .name }}
    depends_on: this.k3s
    additional_options:
      namespace: "cert-manager"
      create_namespace: true
    pre_hook:
      command: *getKubeconfig
      on_destroy: true
      on_plan: true
    inputs:
      installCRDs: true
      webhook.enabled: false
      ingressShim.defaultIssuerName: letsencrypt-prod
      ingressShim.defaultIssuerKind: ClusterIssuer
      ingressShim.defaultACMEChallengeType: dns01
      securityContext.enabled: false
      serviceAccount.create: true
  - 
    name: cert-manager-issuer
    type: kubernetes
    source: ./cert-manager/
    provider_version: "0.2.1"
    kubeconfig: ./kubeconfig_{{ .name }}
    depends_on: this.cert-manager
    pre_hook:
      command: *getKubeconfig
      on_destroy: true
      on_plan: true
  - 
    name: ingress-nginx
    type: helm
    source:
      repository: "https://kubernetes.github.io/ingress-nginx"
      chart: "ingress-nginx"
      version: "3.21.0"
    kubeconfig: ./kubeconfig_{{ .name }}
    depends_on: this.k3s
    additional_options:
      namespace: "ingress-nginx"
      create_namespace: true
    pre_hook:
      command: *getKubeconfig
      on_destroy: true
      on_plan: true
    inputs:
        service.type: LoadBalancer
        controller.admissionWebhooks.enabled: false
        service.externalTrafficPolicy: Local
  - 
    name: csi
    type: helm
    source:
      repository: "https://kubernetes-sigs.github.io/aws-ebs-csi-driver"
      chart: "aws-ebs-csi-driver"
      version: "0.9.14"
    kubeconfig: ./kubeconfig_{{ .name }}
    depends_on: this.k3s
    additional_options:
      namespace: "kube-system"
    pre_hook:
      command: *getKubeconfig
      on_destroy: true
      on_plan: true
    values:
      - file: ./csi/values.yaml
        apply_template: false
  - 
    name: argocd
    type: helm
    source:
      repository: "https://argoproj.github.io/argo-helm"
      chart: "argo-cd"
      version: "2.11.0"
    pre_hook:
      command: *getKubeconfig
      on_destroy: true
    kubeconfig: ./kubeconfig_{{ .name }}
    depends_on: this.cert-manager-issuer
    additional_options:
      namespace: "argocd"
      create_namespace: true
    inputs:
      global.image.tag: v1.8.3
      service.type: LoadBalancer
      server.certificate.domain: argocd.{{ .name }}.{{ .variables.domain }}
      server.certificate.enabled: true
      server.certificate.issuer.name: letsencrypt-prod
      server.certificate.issuer.kind: ClusterIssuer
      server.ingress.enabled: true
      server.ingress.tls[0].secretName: argocd-secret
      server.ingress.hosts[0]: argocd.{{ .name }}.{{ .variables.domain }}
      server.ingress.tls[0].hosts[0]: argocd.{{ .name }}.{{ .variables.domain }}
      server.ingress.annotations.cert-manager\.io/cluster-issuer: letsencrypt-prod
      server.ingress.annotations.kubernetes\.io/ingress.class: nginx
      server.ingress.annotations.kubernetes\.io/tls-acme: "true"
      server.ingress.annotations.nginx\.ingress\.kubernetes\.io/ssl-passthrough: "true"
      server.ingress.annotations.nginx\.ingress\.kubernetes\.io/backend-protocol: "HTTPS"
      server.config.url: https://argocd.{{ .name }}.{{ .variables.domain }}
      configs.secret.argocdServerAdminPassword: {{ .variables.argocdServerAdminPassword }}
      configs.secret.argocdServerAdminPasswordMtime: "2021-01-01T00:00:00Z"
  - 
    name: argocd_apps
    type: kubernetes
    provider_version: "0.2.1"
    source: ./argocd-apps/
    pre_hook:
      command: *getKubeconfig
      on_destroy: true
      on_plan: true
    kubeconfig: ./kubeconfig_{{ .name }}
    depends_on: this.argocd
  - 
    name: print_outputs
    type: printer
    depends_on: this.argocd_apps
    inputs:
      cluster_name: {{ .name }}
      region: {{ .variables.region }}
      kubeconfig: *getKubeconfig
      k3s_version: {{ .variables.k3s_version }}
      argocd_url: https://argocd.{{ .name }}.{{ .variables.domain }}